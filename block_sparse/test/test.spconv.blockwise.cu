// test block-sparse spconv

#include "block_sparse/spconv/spconv_op.h"
#include "block_sparse/spconv/spconv_library_decl.h"
#include "block_sparse/cuda_array.h"
#include "test_util.spconv.h"

#include <tuple>

std::tuple<int, int, int, int, int, int, int, int, float, unsigned> 
test_cases[] = 
{
    std::make_tuple(128, 14, 14, 256, 256, 3, 3, 1, 0.1, 2021),
    std::make_tuple(128, 14, 14, 256, 256, 3, 3, 2, 0.1, 2021),
};

template<int block_sz>
void TestSpconvBlockwise(int n, int h, int w, int c, int f, int r, int s, 
    int stride, float density, unsigned seed)
{
    BlockwiseSpFilter<half> spfilter, spfilter_f_permute;
    spfilter.init_random(f, r, s, c,    // filter tensor dimensions
                        block_sz, 1,    // block size
                        density,        // non-zero density
                        false,          // filter-permute
                        seed);
    spfilter.transform_and_sync_device();
    spfilter_f_permute.init_random(f, r, s, c,    // filter tensor dimensions
                        block_sz, 1,    // block size
                        density,        // non-zero density
                        false,          // filter-permute
                        seed);
    spfilter_f_permute.transform_and_sync_device();

    CudaRandomArray<half> IFMap;
    CudaZerosArray<half>  OFMap;
    IFMap.initialize(n * (h*stride) * (w*stride) * c);
    OFMap.initialize(n * h * w * f);

    std::vector<float> OFMap_ref(n * h * w * f);
    std::vector<float> OFMap_f_permute_ref(n * h * w * f);
    get_host_reference<half>(spfilter, n, h, w, stride, IFMap.host_array, 
        OFMap_ref, filter_channel_first);
    get_host_reference<half>(spfilter_f_permute, n, h, w, stride, IFMap.host_array, 
        OFMap_f_permute_ref, filter_channel_first);
    
#define TEST(BLOCK_SZ, BN, BK, WM, WN, WK, MMA_M, MMA_N, MMA_K, NSTAGE)         \
{                                                                               \
    std::cout << GPU_CC << " " << spfilter.config_str << " ";                   \
    printf("%d %d %d %d %d %d %d %d %d %d %d %d %d %d ", n, h, w, stride, BLOCK_SZ, BN,    \
        BK, WM, WN, WK, MMA_M, MMA_N, MMA_K, NSTAGE);                           \
    bool passed = verify(                                                       \
        NAME_FUN(SpconvBlockwise, Init, BLOCK_SZ, BN, BK, WM, WN, WK, MMA_M, MMA_N, MMA_K, NSTAGE), \
        NAME_FUN(SpconvBlockwise, Exec, BLOCK_SZ, BN, BK, WM, WN, WK, MMA_M, MMA_N, MMA_K, NSTAGE), \
        spfilter, n, h, w, stride, IFMap, OFMap, OFMap_ref);                            \
    if (passed) std::cout << "Passed\n"; else std::cout << "Failed\n";          \
    std::cout << GPU_CC << " " << spfilter_f_permute.config_str << " ";         \
    printf("%d %d %d %d %d %d %d %d %d %d %d %d %d %d ", n, h, w, stride, BLOCK_SZ, BN,    \
        BK, WM, WN, WK, MMA_M, MMA_N, MMA_K, NSTAGE);                           \
    passed = verify(                                                            \
        NAME_FUN(SpconvBlockwise, Init, BLOCK_SZ, BN, BK, WM, WN, WK, MMA_M, MMA_N, MMA_K, NSTAGE), \
        NAME_FUN(SpconvBlockwise, Exec, BLOCK_SZ, BN, BK, WM, WN, WK, MMA_M, MMA_N, MMA_K, NSTAGE), \
        spfilter_f_permute, n, h, w, stride, IFMap, OFMap, OFMap_f_permute_ref);        \
    if (passed) std::cout << "Passed\n"; else std::cout << "Failed\n";          \
}

#if GPU_CC >= 80
    switch (block_sz) {
        case 16:
        TEST(16, 64, 16, 16, 16, 16, 16, 16, 16, 2);
        TEST(16, 64, 16, 16, 16, 16, 16, 16, 16, 3);
        TEST(16, 64, 16, 16, 16, 16, 16, 16, 16, 4);
        TEST(16, 64, 32, 16, 16, 32, 16, 16, 16, 2);
        TEST(16, 64, 32, 16, 16, 32, 16, 16, 16, 3);
        TEST(16, 64, 32, 16, 16, 32, 16, 16, 16, 4);
        TEST(16, 128,16, 16, 16, 16, 16, 16, 16, 2);
        TEST(16, 128,16, 16, 16, 16, 16, 16, 16, 3);
        TEST(16, 128,16, 16, 32, 16, 16, 16, 16, 4);
        TEST(16, 128,32, 16, 32, 32, 16, 16, 16, 2);
        TEST(16, 128,32, 16, 32, 32, 16, 16, 16, 3);
        TEST(16, 128,32, 16, 32, 32, 16, 16, 16, 4);
        TEST(16, 256,16, 16, 64, 16, 16, 16, 16, 2);
        TEST(16, 256,16, 16, 64, 16, 16, 16, 16, 3);
        TEST(16, 256,32, 16, 64, 32, 16, 16, 16, 2);
        TEST(16, 256,32, 16, 64, 32, 16, 16, 16, 3);
        TEST(16, 256,32, 16, 64, 32, 16, 16, 16, 4);
        break;
        
        case 32:
        TEST(32, 64, 16, 32, 16, 16, 16, 16, 16, 2);
        TEST(32, 64, 16, 32, 16, 16, 16, 16, 16, 3);
        TEST(32, 64, 16, 32, 16, 16, 16, 16, 16, 4);
        TEST(32, 64, 32, 32, 16, 32, 16, 16, 16, 2);
        TEST(32, 64, 32, 32, 16, 32, 16, 16, 16, 3);
        TEST(32, 64, 32, 32, 16, 32, 16, 16, 16, 4);
        TEST(32, 128,16, 32, 32, 16, 16, 16, 16, 2);
        TEST(32, 128,16, 32, 32, 16, 16, 16, 16, 3);
        TEST(32, 128,16, 32, 32, 16, 16, 16, 16, 4);
        TEST(32, 128,32, 32, 32, 32, 16, 16, 16, 2);
        TEST(32, 128,32, 32, 32, 32, 16, 16, 16, 3);
        TEST(32, 128,32, 32, 32, 32, 16, 16, 16, 4);
        TEST(32, 128,64, 32, 32, 64, 16, 16, 16, 2);
        TEST(32, 256,16, 32, 64, 16, 16, 16, 16, 2);
        TEST(32, 256,16, 32, 64, 16, 16, 16, 16, 3);
        TEST(32, 256,32, 32, 64, 32, 16, 16, 16, 2);
        TEST(32, 256,32, 32, 64, 32, 16, 16, 16, 3);
        TEST(32, 256,32, 32, 64, 32, 16, 16, 16, 4);
        break;

        case 64:
        TEST(64, 64, 16, 32, 32, 16, 16, 16, 16, 2);
        TEST(64, 64, 16, 32, 32, 16, 16, 16, 16, 3);
        TEST(64, 64, 16, 32, 32, 16, 16, 16, 16, 4);
        TEST(64, 64, 32, 32, 32, 32, 16, 16, 16, 2);
        TEST(64, 64, 32, 32, 32, 32, 16, 16, 16, 3);
        TEST(64, 64, 32, 32, 32, 32, 16, 16, 16, 4);
        TEST(64, 64, 32, 32, 32, 32, 16, 16, 16, 5);
        TEST(64, 128,32, 32, 32, 32, 16, 16, 16, 2);
        TEST(64, 128,32, 32, 32, 32, 16, 16, 16, 3);
        TEST(64, 128,32, 32, 32, 32, 16, 16, 16, 4);
        TEST(64, 128,32, 64, 32, 32, 16, 16, 16, 2);
        TEST(64, 128,32, 64, 32, 32, 16, 16, 16, 3);
        TEST(64, 128,32, 64, 32, 32, 16, 16, 16, 4);
        TEST(64, 256,16, 32, 64, 16, 16, 16, 16, 2);
        TEST(64, 256,16, 32, 64, 16, 16, 16, 16, 3);
        break;
        
        case 128:
        TEST(128,32, 32, 32, 32, 32, 16, 16, 16, 2);
        TEST(128,32, 32, 32, 32, 32, 16, 16, 16, 3);
        TEST(128,64, 32, 16, 64, 32, 16, 16, 16, 2);
        TEST(128,64, 32, 16, 64, 32, 16, 16, 16, 3);
        TEST(128,64, 32, 16, 64, 32, 16, 16, 16, 4);
        TEST(128,64, 32, 32, 32, 32, 16, 16, 16, 2);
        TEST(128,64, 32, 32, 32, 32, 16, 16, 16, 3);
        TEST(128,64, 32, 32, 32, 32, 16, 16, 16, 4);
        TEST(128,64, 32, 32, 64, 32, 16, 16, 16, 2);
        TEST(128,64, 32, 32, 64, 32, 16, 16, 16, 3);
        TEST(128,64, 32, 32, 64, 32, 16, 16, 16, 4);
        TEST(128,128,32, 32, 64, 32, 16, 16, 16, 2);
        TEST(128,128,32, 32, 64, 32, 16, 16, 16, 4);
        TEST(128,128,32, 64, 32, 32, 16, 16, 16, 2);
        TEST(128,128,32, 64, 32, 32, 16, 16, 16, 4);        
        break;
    }
#else 
#if GPU_CC >= 75
    switch (block_sz) {
        case 16:
        TEST(16, 64, 16, 16, 16, 16, 16, 16, 8, 2);
        TEST(16, 64, 16, 16, 16, 16, 16, 16, 8, 3);
        TEST(16, 64, 16, 16, 16, 16, 16, 16, 8, 4);
        TEST(16, 64, 32, 16, 16, 32, 16, 16, 8, 2);
        TEST(16, 64, 32, 16, 16, 32, 16, 16, 8, 3);
        TEST(16, 64, 32, 16, 16, 32, 16, 16, 8, 4);
        TEST(16, 128,16, 16, 16, 16, 16, 16, 8, 2);
        TEST(16, 128,16, 16, 16, 16, 16, 16, 8, 3);
        TEST(16, 128,16, 16, 32, 16, 16, 16, 8, 4);
        TEST(16, 128,32, 16, 32, 32, 16, 16, 8, 2);
        TEST(16, 128,32, 16, 32, 32, 16, 16, 8, 3);
        TEST(16, 128,32, 16, 32, 32, 16, 16, 8, 4);
        TEST(16, 256,16, 16, 64, 16, 16, 16, 8, 2);
        TEST(16, 256,16, 16, 64, 16, 16, 16, 8, 3);
        TEST(16, 256,32, 16, 64, 32, 16, 16, 8, 2);
        TEST(16, 256,32, 16, 64, 32, 16, 16, 8, 3);
        TEST(16, 256,32, 16, 64, 32, 16, 16, 8, 4);
        break; case 32:
        TEST(32, 64, 16, 32, 16, 16, 16, 16, 8, 2);
        TEST(32, 64, 16, 32, 16, 16, 16, 16, 8, 3);
        TEST(32, 64, 16, 32, 16, 16, 16, 16, 8, 4);
        TEST(32, 64, 32, 32, 16, 32, 16, 16, 8, 2);
        TEST(32, 64, 32, 32, 16, 32, 16, 16, 8, 3);
        TEST(32, 64, 32, 32, 16, 32, 16, 16, 8, 4);
        TEST(32, 128,16, 32, 32, 16, 16, 16, 8, 2);
        TEST(32, 128,16, 32, 32, 16, 16, 16, 8, 3);
        TEST(32, 128,16, 32, 32, 16, 16, 16, 8, 4);
        TEST(32, 128,32, 32, 32, 32, 16, 16, 8, 2);
        TEST(32, 128,32, 32, 32, 32, 16, 16, 8, 3);
        TEST(32, 128,32, 32, 32, 32, 16, 16, 8, 4);
        TEST(32, 128,64, 32, 32, 64, 16, 16, 8, 2);
        TEST(32, 256,16, 32, 64, 16, 16, 16, 8, 2);
        TEST(32, 256,16, 32, 64, 16, 16, 16, 8, 3);
        TEST(32, 256,32, 32, 64, 32, 16, 16, 8, 2);
        TEST(32, 256,32, 32, 64, 32, 16, 16, 8, 3);
        TEST(32, 256,32, 32, 64, 32, 16, 16, 8, 4);
        break; case 64:
        TEST(64, 64, 16, 32, 32, 16, 16, 16, 8, 2);
        TEST(64, 64, 16, 32, 32, 16, 16, 16, 8, 3);
        TEST(64, 64, 16, 32, 32, 16, 16, 16, 8, 4);
        TEST(64, 64, 32, 32, 32, 32, 16, 16, 8, 2);
        TEST(64, 64, 32, 32, 32, 32, 16, 16, 8, 3);
        TEST(64, 64, 32, 32, 32, 32, 16, 16, 8, 4);
        TEST(64, 64, 32, 32, 32, 32, 16, 16, 8, 5);
        TEST(64, 128,32, 32, 32, 32, 16, 16, 8, 2);
        TEST(64, 128,32, 32, 32, 32, 16, 16, 8, 3);
        TEST(64, 128,32, 32, 32, 32, 16, 16, 8, 4);
        TEST(64, 128,32, 64, 32, 32, 16, 16, 8, 2);
        TEST(64, 128,32, 64, 32, 32, 16, 16, 8, 3);
        TEST(64, 128,32, 64, 32, 32, 16, 16, 8, 4);
        TEST(64, 256,16, 32, 64, 16, 16, 16, 8, 2);
        TEST(64, 256,16, 32, 64, 16, 16, 16, 8, 3);
        break; case 128:
        TEST(128,32, 32, 32, 32, 32, 16, 16, 8, 2);
        TEST(128,32, 32, 32, 32, 32, 16, 16, 8, 3);
        TEST(128,64, 32, 16, 64, 32, 16, 16, 8, 2);
        TEST(128,64, 32, 16, 64, 32, 16, 16, 8, 3);
        TEST(128,64, 32, 16, 64, 32, 16, 16, 8, 4);
        TEST(128,64, 32, 32, 32, 32, 16, 16, 8, 2);
        TEST(128,64, 32, 32, 32, 32, 16, 16, 8, 3);
        TEST(128,64, 32, 32, 32, 32, 16, 16, 8, 4);
        TEST(128,64, 32, 32, 64, 32, 16, 16, 8, 2);
        TEST(128,64, 32, 32, 64, 32, 16, 16, 8, 3);
        TEST(128,64, 32, 32, 64, 32, 16, 16, 8, 4);
        TEST(128,128,32, 32, 64, 32, 16, 16, 8, 2);
        TEST(128,128,32, 32, 64, 32, 16, 16, 8, 4);
        TEST(128,128,32, 64, 32, 32, 16, 16, 8, 2);
        TEST(128,128,32, 64, 32, 32, 16, 16, 8, 4);
    }
#else
    switch(block_sz) {
        case 16:
        TEST(16, 64, 16, 16, 16, 16, 16, 16, 16, 2);
        TEST(16, 64, 32, 16, 16, 32, 16, 16, 16, 2);
        TEST(16, 64, 32, 16, 16, 32, 16, 16, 16, 3);
        TEST(16, 64, 32, 16, 16, 32, 16, 16, 16, 4);
        TEST(16, 128,16, 16, 32, 16, 16, 16, 16, 2);
        TEST(16, 128,16, 16, 32, 16, 16, 16, 16, 3);
        TEST(16, 128,16, 16, 32, 16, 16, 16, 16, 4);
        TEST(16, 128,32, 16, 32, 32, 16, 16, 16, 2);
        TEST(16, 128,32, 16, 32, 32, 16, 16, 16, 3);
        TEST(16, 128,32, 16, 32, 32, 16, 16, 16, 4);
        TEST(16, 256,16, 16, 64, 16, 16, 16, 16, 2);
        TEST(16, 256,16, 16, 64, 16, 16, 16, 16, 3);
        TEST(16, 256,16, 16, 64, 16, 16, 16, 16, 4);
        TEST(16, 256,32, 16, 64, 32, 16, 16, 16, 2);
        TEST(16, 256,32, 16, 64, 32, 16, 16, 16, 3);
        TEST(16, 256,32, 16, 64, 32, 16, 16, 16, 4);
        break; case 32:
        TEST(32, 128,16, 32, 32, 16, 32, 32, 16, 2);
        TEST(32, 128,16, 32, 32, 16, 32, 32, 16, 3);
        TEST(32, 128,16, 32, 32, 16, 32, 32, 16, 4);
        TEST(32, 128,32, 16, 64, 32, 16, 16, 16, 2);
        TEST(32, 128,32, 16, 64, 32, 16, 16, 16, 3);
        TEST(32, 128,32, 16, 64, 32, 16, 16, 16, 4);
        TEST(32, 128,32, 32, 32, 32, 32, 32, 16, 2);
        TEST(32, 128,32, 32, 32, 32, 32, 32, 16, 3);
        TEST(32, 128,32, 32, 32, 32, 32, 32, 16, 4);
        TEST(32, 256,16, 32, 64, 16, 32, 32, 16, 2);
        TEST(32, 256,16, 32, 64, 16, 32, 32, 16, 3);
        TEST(32, 256,16, 32, 64, 16, 32, 32, 16, 4);
        TEST(32, 256,32, 32, 64, 32, 32, 32, 16, 2);
        TEST(32, 256,32, 32, 64, 32, 32, 32, 16, 3);
        TEST(32, 256,32, 32, 64, 32, 32, 32, 16, 4);
        break; case 64:
        TEST(64, 64, 16, 32, 32, 16, 32, 32, 16, 2);
        TEST(64, 64, 16, 32, 32, 16, 32, 32, 16, 3);
        TEST(64, 64, 16, 32, 32, 16, 32, 32, 16, 4);
        TEST(64, 64, 32, 32, 32, 32, 32, 32, 16, 2);
        TEST(64, 64, 32, 32, 32, 32, 32, 32, 16, 3);
        TEST(64, 64, 32, 32, 32, 32, 32, 32, 16, 4);
        TEST(64, 128,16, 32, 64, 16, 32, 32, 16, 2);
        TEST(64, 128,16, 32, 64, 16, 32, 32, 16, 3);
        TEST(64, 128,16, 32, 64, 16, 32, 32, 16, 4);
        TEST(64, 128,32, 32, 64, 32, 32, 32, 16, 2);
        TEST(64, 128,32, 32, 64, 32, 32, 32, 16, 3);
        TEST(64, 128,32, 32, 64, 32, 32, 32, 16, 4);
        TEST(64, 128,16, 64, 32, 16, 32, 32, 16, 2);
        TEST(64, 128,16, 64, 32, 16, 32, 32, 16, 3);
        TEST(64, 128,16, 64, 32, 16, 32, 32, 16, 4);
        TEST(64, 128,32, 64, 32, 32, 32, 32, 16, 2);
        TEST(64, 128,32, 64, 32, 32, 32, 32, 16, 3);
        TEST(64, 128,32, 64, 32, 32, 32, 32, 16, 4);
        break; case 128:
        TEST(128,32, 32, 32, 32, 32, 32, 32, 16, 2);
        TEST(128,32, 32, 32, 32, 32, 32, 32, 16, 3);
        TEST(128,64, 32, 32, 64, 32, 32, 32, 16, 2);
        TEST(128,64, 32, 32, 64, 32, 32, 32, 16, 3);
        TEST(128,64, 32, 32, 64, 32, 32, 32, 16, 4);
        TEST(128,128,32, 32, 64, 32, 32, 32, 16, 2);
        TEST(128,128,32, 32, 64, 32, 32, 32, 16, 4);
        TEST(128,128,32, 64, 32, 32, 32, 32, 16, 2);
        TEST(128,128,32, 64, 32, 32, 32, 32, 16, 4);
        TEST(128,128,64, 32, 64, 64, 32, 32, 16, 2);
        TEST(128,128,64, 64, 32, 64, 32, 32, 16, 2);        
    }
#endif  // GPU_CC >= 75
#endif  // GPU_CC >= 80
}

int main(int argc, const char** argv)
{
    int n, h, w, c, f, r, s, stride;
    float density;
    unsigned seed; 

    for (auto test: test_cases) {
        
        std::tie(n, h, w, c, f, r, s, stride, density, seed) = test;
        TestSpconvBlockwise<16>(n, h, w, c, f, r, s, stride, density, seed);
        TestSpconvBlockwise<32>(n, h, w, c, f, r, s, stride, density, seed);
        TestSpconvBlockwise<64>(n, h, w, c, f, r, s, stride, density, seed);
        TestSpconvBlockwise<128>(n, h, w, c, f, r, s, stride, density, seed);
    }
}