// test block-sparse spmm

#include "block_sparse/spmm/spmm_op.h"
#include "block_sparse/spmm/spmm_library_decl.h"
#include "block_sparse/cuda_array.h"
#include "test_util.spmm.h"

#include <tuple>

std::tuple<int, int, int, float, unsigned> test_cases[]= 
{   
    // std::make_tuple(2048,512,2048,0.4, 2021), // long K
    std::make_tuple(1024,960,1024,0.1, 2021), // N boundary handling
};

template<int block_sz >
void TestSpmmBlockwise(int m, int n, int k, float density, unsigned seed) 
{
    BlockwiseSpMatrix<half> spmat, spmat_row_permute;
    spmat.init_random(m, k,         // matrix size
                    block_sz, 1,    // block size 
                    density,        // non-zero density
                    false,          // row-permute
                    seed);
    spmat.transform_and_sync_device();
    spmat_row_permute.init_random(m, k, 
                    block_sz, 1, 
                    density, 
                    true,           // row-permute
                    seed);
    spmat_row_permute.transform_and_sync_device();

    CudaRandomArray<half> B;
    CudaZerosArray<half> C;
    CudaZerosArray<half> D;
    B.initialize(k*n);
    D.initialize(m*n);
    C.initialize(m*n);
    B.sync_device();
    C.sync_device();
    D.sync_device();

    std::vector<float> D_ref(m*n);
    std::vector<float> D_row_permute_ref(m*n);
    get_host_reference<half>(spmat, n, B.host_array, 
                            1.0f,           // alpha
                            C.host_array,   
                            0.0f,           // beta
                            D_ref);
    get_host_reference<half>(spmat_row_permute, n, B.host_array, 
                            1.0f,           // alpha
                            C.host_array, 
                            0.0f,           // beta
                            D_row_permute_ref);

#define TEST(BLOCK_SZ, BN, BK, WM, WN, WK, MMA_M, MMA_N, MMA_K, NSTAGE) \
{\
    std::cout << GPU_CC << " " << spmat.config_str << " ";\
    printf("%d %d %d %d %d %d %d %d %d %d %d ", n, BLOCK_SZ, BN, BK, WM, WN, WK, MMA_M, MMA_N, MMA_K, NSTAGE);\
    bool passed = verify( \
        NAME_FUN(SpmmBlockwise, Init, BLOCK_SZ, BN, BK, WM, WN, WK, MMA_M, MMA_N, MMA_K, NSTAGE), \
        NAME_FUN(SpmmBlockwise, Exec, BLOCK_SZ, BN, BK, WM, WN, WK, MMA_M, MMA_N, MMA_K, NSTAGE), \
        spmat, n, B, D, D_ref); \
    if (passed) std::cout << "Passed\n"; else std::cout << "Failed\n"; \
    std::cout << GPU_CC << " " << spmat_row_permute.config_str << " ";\
    printf("%d %d %d %d %d %d %d %d %d %d %d ", n, BLOCK_SZ, BN, BK, WM, WN, WK, MMA_M, MMA_N, MMA_K, NSTAGE);\
    passed = verify( \
        NAME_FUN(SpmmBlockwise, Init, BLOCK_SZ, BN, BK, WM, WN, WK, MMA_M, MMA_N, MMA_K, NSTAGE), \
        NAME_FUN(SpmmBlockwise, Exec, BLOCK_SZ, BN, BK, WM, WN, WK, MMA_M, MMA_N, MMA_K, NSTAGE), \
        spmat_row_permute, n, B, D, D_row_permute_ref); \
    if (passed) std::cout << "Passed\n"; else std::cout << "Failed\n"; \
}

    #if GPU_CC >= 80
    switch (block_sz) {
        case 16:
        TEST(16, 64, 16, 16, 16, 16, 16, 16, 16, 2);
        TEST(16, 64, 16, 16, 16, 16, 16, 16, 16, 3);
        TEST(16, 64, 16, 16, 16, 16, 16, 16, 16, 4);
        TEST(16, 64, 32, 16, 16, 32, 16, 16, 16, 2);
        TEST(16, 64, 32, 16, 16, 32, 16, 16, 16, 3);
        TEST(16, 64, 32, 16, 16, 32, 16, 16, 16, 4);
        TEST(16, 128,16, 16, 16, 16, 16, 16, 16, 2);
        TEST(16, 128,16, 16, 16, 16, 16, 16, 16, 3);
        TEST(16, 128,16, 16, 32, 16, 16, 16, 16, 4);
        TEST(16, 128,32, 16, 32, 32, 16, 16, 16, 2);
        TEST(16, 128,32, 16, 32, 32, 16, 16, 16, 3);
        TEST(16, 128,32, 16, 32, 32, 16, 16, 16, 4);
        TEST(16, 256,16, 16, 64, 16, 16, 16, 16, 2);
        TEST(16, 256,16, 16, 64, 16, 16, 16, 16, 3);
        TEST(16, 256,32, 16, 64, 32, 16, 16, 16, 2);
        TEST(16, 256,32, 16, 64, 32, 16, 16, 16, 3);
        TEST(16, 256,32, 16, 64, 32, 16, 16, 16, 4);
        break;
        
        case 32:
        TEST(32, 64, 16, 32, 16, 16, 16, 16, 16, 2);
        TEST(32, 64, 16, 32, 16, 16, 16, 16, 16, 3);
        TEST(32, 64, 16, 32, 16, 16, 16, 16, 16, 4);
        TEST(32, 64, 32, 32, 16, 32, 16, 16, 16, 2);
        TEST(32, 64, 32, 32, 16, 32, 16, 16, 16, 3);
        TEST(32, 64, 32, 32, 16, 32, 16, 16, 16, 4);
        TEST(32, 128,16, 32, 32, 16, 16, 16, 16, 2);
        TEST(32, 128,16, 32, 32, 16, 16, 16, 16, 3);
        TEST(32, 128,16, 32, 32, 16, 16, 16, 16, 4);
        TEST(32, 128,32, 32, 32, 32, 16, 16, 16, 2);
        TEST(32, 128,32, 32, 32, 32, 16, 16, 16, 3);
        TEST(32, 128,32, 32, 32, 32, 16, 16, 16, 4);
        TEST(32, 128,64, 32, 32, 64, 16, 16, 16, 2);
        TEST(32, 256,16, 32, 64, 16, 16, 16, 16, 2);
        TEST(32, 256,16, 32, 64, 16, 16, 16, 16, 3);
        TEST(32, 256,32, 32, 64, 32, 16, 16, 16, 2);
        TEST(32, 256,32, 32, 64, 32, 16, 16, 16, 3);
        TEST(32, 256,32, 32, 64, 32, 16, 16, 16, 4);
        break;

        case 64:
        TEST(64, 64, 16, 32, 32, 16, 16, 16, 16, 2);
        TEST(64, 64, 16, 32, 32, 16, 16, 16, 16, 3);
        TEST(64, 64, 16, 32, 32, 16, 16, 16, 16, 4);
        TEST(64, 64, 32, 32, 32, 32, 16, 16, 16, 2);
        TEST(64, 64, 32, 32, 32, 32, 16, 16, 16, 3);
        TEST(64, 64, 32, 32, 32, 32, 16, 16, 16, 4);
        TEST(64, 64, 32, 32, 32, 32, 16, 16, 16, 5);
        TEST(64, 128,32, 32, 32, 32, 16, 16, 16, 2);
        TEST(64, 128,32, 32, 32, 32, 16, 16, 16, 3);
        TEST(64, 128,32, 32, 32, 32, 16, 16, 16, 4);
        TEST(64, 128,32, 64, 32, 32, 16, 16, 16, 2);
        TEST(64, 128,32, 64, 32, 32, 16, 16, 16, 3);
        TEST(64, 128,32, 64, 32, 32, 16, 16, 16, 4);
        TEST(64, 256,16, 32, 64, 16, 16, 16, 16, 2);
        TEST(64, 256,16, 32, 64, 16, 16, 16, 16, 3);
        break;
        
        case 128:
        TEST(128,32, 32, 32, 32, 32, 16, 16, 16, 2);
        TEST(128,32, 32, 32, 32, 32, 16, 16, 16, 3);
        TEST(128,64, 32, 16, 64, 32, 16, 16, 16, 2);
        TEST(128,64, 32, 16, 64, 32, 16, 16, 16, 3);
        TEST(128,64, 32, 16, 64, 32, 16, 16, 16, 4);
        TEST(128,64, 32, 32, 32, 32, 16, 16, 16, 2);
        TEST(128,64, 32, 32, 32, 32, 16, 16, 16, 3);
        TEST(128,64, 32, 32, 32, 32, 16, 16, 16, 4);
        TEST(128,64, 32, 32, 64, 32, 16, 16, 16, 2);
        TEST(128,64, 32, 32, 64, 32, 16, 16, 16, 3);
        TEST(128,64, 32, 32, 64, 32, 16, 16, 16, 4);
        TEST(128,128,32, 32, 64, 32, 16, 16, 16, 2);
        TEST(128,128,32, 32, 64, 32, 16, 16, 16, 4);
        TEST(128,128,32, 64, 32, 32, 16, 16, 16, 2);
        TEST(128,128,32, 64, 32, 32, 16, 16, 16, 4);        
        break;
    }
    #else 
    #if GPU_CC >= 75
    switch (block_sz) {
        case 16:
        TEST(16, 64, 16, 16, 16, 16, 16, 16, 8, 2);
        TEST(16, 64, 16, 16, 16, 16, 16, 16, 8, 3);
        TEST(16, 64, 16, 16, 16, 16, 16, 16, 8, 4);
        TEST(16, 64, 32, 16, 16, 32, 16, 16, 8, 2);
        TEST(16, 64, 32, 16, 16, 32, 16, 16, 8, 3);
        TEST(16, 64, 32, 16, 16, 32, 16, 16, 8, 4);
        TEST(16, 128,16, 16, 16, 16, 16, 16, 8, 2);
        TEST(16, 128,16, 16, 16, 16, 16, 16, 8, 3);
        TEST(16, 128,16, 16, 32, 16, 16, 16, 8, 4);
        TEST(16, 128,32, 16, 32, 32, 16, 16, 8, 2);
        TEST(16, 128,32, 16, 32, 32, 16, 16, 8, 3);
        TEST(16, 128,32, 16, 32, 32, 16, 16, 8, 4);
        TEST(16, 256,16, 16, 64, 16, 16, 16, 8, 2);
        TEST(16, 256,16, 16, 64, 16, 16, 16, 8, 3);
        TEST(16, 256,32, 16, 64, 32, 16, 16, 8, 2);
        TEST(16, 256,32, 16, 64, 32, 16, 16, 8, 3);
        TEST(16, 256,32, 16, 64, 32, 16, 16, 8, 4);
        break; case 32:
        TEST(32, 64, 16, 32, 16, 16, 16, 16, 8, 2);
        TEST(32, 64, 16, 32, 16, 16, 16, 16, 8, 3);
        TEST(32, 64, 16, 32, 16, 16, 16, 16, 8, 4);
        TEST(32, 64, 32, 32, 16, 32, 16, 16, 8, 2);
        TEST(32, 64, 32, 32, 16, 32, 16, 16, 8, 3);
        TEST(32, 64, 32, 32, 16, 32, 16, 16, 8, 4);
        TEST(32, 128,16, 32, 32, 16, 16, 16, 8, 2);
        TEST(32, 128,16, 32, 32, 16, 16, 16, 8, 3);
        TEST(32, 128,16, 32, 32, 16, 16, 16, 8, 4);
        TEST(32, 128,32, 32, 32, 32, 16, 16, 8, 2);
        TEST(32, 128,32, 32, 32, 32, 16, 16, 8, 3);
        TEST(32, 128,32, 32, 32, 32, 16, 16, 8, 4);
        TEST(32, 128,64, 32, 32, 64, 16, 16, 8, 2);
        TEST(32, 256,16, 32, 64, 16, 16, 16, 8, 2);
        TEST(32, 256,16, 32, 64, 16, 16, 16, 8, 3);
        TEST(32, 256,32, 32, 64, 32, 16, 16, 8, 2);
        TEST(32, 256,32, 32, 64, 32, 16, 16, 8, 3);
        TEST(32, 256,32, 32, 64, 32, 16, 16, 8, 4);
        break; case 64:
        TEST(64, 64, 16, 32, 32, 16, 16, 16, 8, 2);
        TEST(64, 64, 16, 32, 32, 16, 16, 16, 8, 3);
        TEST(64, 64, 16, 32, 32, 16, 16, 16, 8, 4);
        TEST(64, 64, 32, 32, 32, 32, 16, 16, 8, 2);
        TEST(64, 64, 32, 32, 32, 32, 16, 16, 8, 3);
        TEST(64, 64, 32, 32, 32, 32, 16, 16, 8, 4);
        TEST(64, 64, 32, 32, 32, 32, 16, 16, 8, 5);
        TEST(64, 128,32, 32, 32, 32, 16, 16, 8, 2);
        TEST(64, 128,32, 32, 32, 32, 16, 16, 8, 3);
        TEST(64, 128,32, 32, 32, 32, 16, 16, 8, 4);
        TEST(64, 128,32, 64, 32, 32, 16, 16, 8, 2);
        TEST(64, 128,32, 64, 32, 32, 16, 16, 8, 3);
        TEST(64, 128,32, 64, 32, 32, 16, 16, 8, 4);
        TEST(64, 256,16, 32, 64, 16, 16, 16, 8, 2);
        TEST(64, 256,16, 32, 64, 16, 16, 16, 8, 3);
        break; case 128:
        TEST(128,32, 32, 32, 32, 32, 16, 16, 8, 2);
        TEST(128,32, 32, 32, 32, 32, 16, 16, 8, 3);
        TEST(128,64, 32, 16, 64, 32, 16, 16, 8, 2);
        TEST(128,64, 32, 16, 64, 32, 16, 16, 8, 3);
        TEST(128,64, 32, 16, 64, 32, 16, 16, 8, 4);
        TEST(128,64, 32, 32, 32, 32, 16, 16, 8, 2);
        TEST(128,64, 32, 32, 32, 32, 16, 16, 8, 3);
        TEST(128,64, 32, 32, 32, 32, 16, 16, 8, 4);
        TEST(128,64, 32, 32, 64, 32, 16, 16, 8, 2);
        TEST(128,64, 32, 32, 64, 32, 16, 16, 8, 3);
        TEST(128,64, 32, 32, 64, 32, 16, 16, 8, 4);
        TEST(128,128,32, 32, 64, 32, 16, 16, 8, 2);
        TEST(128,128,32, 32, 64, 32, 16, 16, 8, 4);
        TEST(128,128,32, 64, 32, 32, 16, 16, 8, 2);
        TEST(128,128,32, 64, 32, 32, 16, 16, 8, 4);
    }
    #else
    switch(block_sz) {
        case 16:
        TEST(16, 64, 16, 16, 16, 16, 16, 16, 16, 2);
        TEST(16, 64, 32, 16, 16, 32, 16, 16, 16, 2);
        TEST(16, 64, 32, 16, 16, 32, 16, 16, 16, 3);
        TEST(16, 64, 32, 16, 16, 32, 16, 16, 16, 4);
        TEST(16, 128,16, 16, 32, 16, 16, 16, 16, 2);
        TEST(16, 128,16, 16, 32, 16, 16, 16, 16, 3);
        TEST(16, 128,16, 16, 32, 16, 16, 16, 16, 4);
        TEST(16, 128,32, 16, 32, 32, 16, 16, 16, 2);
        TEST(16, 128,32, 16, 32, 32, 16, 16, 16, 3);
        TEST(16, 128,32, 16, 32, 32, 16, 16, 16, 4);
        TEST(16, 256,16, 16, 64, 16, 16, 16, 16, 2);
        TEST(16, 256,16, 16, 64, 16, 16, 16, 16, 3);
        TEST(16, 256,16, 16, 64, 16, 16, 16, 16, 4);
        TEST(16, 256,32, 16, 64, 32, 16, 16, 16, 2);
        TEST(16, 256,32, 16, 64, 32, 16, 16, 16, 3);
        TEST(16, 256,32, 16, 64, 32, 16, 16, 16, 4);
        break; case 32:
        TEST(32, 128,16, 32, 32, 16, 32, 32, 16, 2);
        TEST(32, 128,16, 32, 32, 16, 32, 32, 16, 3);
        TEST(32, 128,16, 32, 32, 16, 32, 32, 16, 4);
        TEST(32, 128,32, 16, 64, 32, 16, 16, 16, 2);
        TEST(32, 128,32, 16, 64, 32, 16, 16, 16, 3);
        TEST(32, 128,32, 16, 64, 32, 16, 16, 16, 4);
        TEST(32, 128,32, 32, 32, 32, 32, 32, 16, 2);
        TEST(32, 128,32, 32, 32, 32, 32, 32, 16, 3);
        TEST(32, 128,32, 32, 32, 32, 32, 32, 16, 4);
        TEST(32, 256,16, 32, 64, 16, 32, 32, 16, 2);
        TEST(32, 256,16, 32, 64, 16, 32, 32, 16, 3);
        TEST(32, 256,16, 32, 64, 16, 32, 32, 16, 4);
        TEST(32, 256,32, 32, 64, 32, 32, 32, 16, 2);
        TEST(32, 256,32, 32, 64, 32, 32, 32, 16, 3);
        TEST(32, 256,32, 32, 64, 32, 32, 32, 16, 4);
        break; case 64:
        TEST(64, 64, 16, 32, 32, 16, 32, 32, 16, 2);
        TEST(64, 64, 16, 32, 32, 16, 32, 32, 16, 3);
        TEST(64, 64, 16, 32, 32, 16, 32, 32, 16, 4);
        TEST(64, 64, 32, 32, 32, 32, 32, 32, 16, 2);
        TEST(64, 64, 32, 32, 32, 32, 32, 32, 16, 3);
        TEST(64, 64, 32, 32, 32, 32, 32, 32, 16, 4);
        TEST(64, 128,16, 32, 64, 16, 32, 32, 16, 2);
        TEST(64, 128,16, 32, 64, 16, 32, 32, 16, 3);
        TEST(64, 128,16, 32, 64, 16, 32, 32, 16, 4);
        TEST(64, 128,32, 32, 64, 32, 32, 32, 16, 2);
        TEST(64, 128,32, 32, 64, 32, 32, 32, 16, 3);
        TEST(64, 128,32, 32, 64, 32, 32, 32, 16, 4);
        TEST(64, 128,16, 64, 32, 16, 32, 32, 16, 2);
        TEST(64, 128,16, 64, 32, 16, 32, 32, 16, 3);
        TEST(64, 128,16, 64, 32, 16, 32, 32, 16, 4);
        TEST(64, 128,32, 64, 32, 32, 32, 32, 16, 2);
        TEST(64, 128,32, 64, 32, 32, 32, 32, 16, 3);
        TEST(64, 128,32, 64, 32, 32, 32, 32, 16, 4);
        break; case 128:
        TEST(128,32, 32, 32, 32, 32, 32, 32, 16, 2);
        TEST(128,32, 32, 32, 32, 32, 32, 32, 16, 3);
        TEST(128,64, 32, 32, 64, 32, 32, 32, 16, 2);
        TEST(128,64, 32, 32, 64, 32, 32, 32, 16, 3);
        TEST(128,64, 32, 32, 64, 32, 32, 32, 16, 4);
        TEST(128,128,32, 32, 64, 32, 32, 32, 16, 2);
        TEST(128,128,32, 32, 64, 32, 32, 32, 16, 4);
        TEST(128,128,32, 64, 32, 32, 32, 32, 16, 2);
        TEST(128,128,32, 64, 32, 32, 32, 32, 16, 4);
        TEST(128,128,64, 32, 64, 64, 32, 32, 16, 2);
        TEST(128,128,64, 64, 32, 64, 32, 32, 16, 2);        
    }
    #endif  // GPU_CC >= 75
    #endif  // GPU_CC >= 80
}

int main(int argc, const char** argv)
{
    int m, n, k;
    float density;
    unsigned seed; 

    for (auto test: test_cases) {
        
        std::tie(m, n, k, density, seed) = test;
        TestSpmmBlockwise<16>(m, n, k, density, seed);
        TestSpmmBlockwise<32>(m, n, k, density, seed);
        TestSpmmBlockwise<64>(m, n, k, density, seed);
        TestSpmmBlockwise<128>(m, n, k, density, seed);
    }
}